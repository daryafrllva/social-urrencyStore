import asyncio
import telebot
from telebot.async_telebot import AsyncTeleBot
from telebot import types
import random
from database import get_or_create_user, update_user, get_all_users

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = AsyncTeleBot('YOUR_TELEGRAM_BOT_TOKEN')  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω

# –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ–º—ã
MEMES = {
    "meme1": {"image_url": "https://example.com/meme1.jpg", "price": 50, "caption": "–¢–µ—Ä–∞–ø–µ–≤—Ç –¥—É—Ä–µ–µ—Ç —Å —ç—Ç–æ–π –ø—Ä–∏–∫–æ—Ä–º–∫–∏"},
    "meme2": {"image_url": "https://example.com/meme2.jpg", "price": 75, "caption": "–ö–æ–≥–¥–∞ –≤—ã—Ö–æ–¥–∏—à—å –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞ –±–µ–∑ –ø–æ–∫—É–ø–æ–∫"},
    "meme3": {"image_url": "https://example.com/meme3.jpg", "price": 100, "caption": "–û –ì–æ—Å–ø–æ–¥–∏, —ç—Ç–æ –Ω–æ–≤–∞—è —ç–º–æ—Ü–∏—è?!"},
    "meme4": {"image_url": "https://example.com/meme4.jpg", "price": 80, "caption": "–ë—É! –ò—Å–ø—É–≥–∞–ª—Å—è?! –ù–µ –±–æ–π—Å—è"},
}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
async def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–ë–∞–ª–∞–Ω—Å"), types.KeyboardButton("–ó–∞–¥–∞–Ω–∏—è"))
    markup.add(types.KeyboardButton("–ü–µ—Ä–µ–≤–æ–¥"), types.KeyboardButton("–†–µ–π—Ç–∏–Ω–≥"))
    markup.add(types.KeyboardButton("–ú–∞–≥–∞–∑–∏–Ω"))

    await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
@bot.message_handler(func=lambda message: True)
async def handle_buttons(message):
    user_id = message.from_user.id
    user_data = get_or_create_user(user_id)

    if message.text == "–ë–∞–ª–∞–Ω—Å":
        active_balance = user_data["active_balance"]
        passive_balance = user_data["passive_balance"]
        await bot.send_message(message.chat.id, f"–ê–∫—Ç–∏–≤–Ω—ã–π —Å—á–µ—Ç: {active_balance} –º–æ–Ω–µ—Ç\n–ü–∞—Å—Å–∏–≤–Ω—ã–π —Å—á–µ—Ç: {passive_balance} –º–æ–Ω–µ—Ç")

    elif message.text == "–ó–∞–¥–∞–Ω–∏—è":
        await bot.send_message(message.chat.id, "–¢—É—Ç —á—Ç–æ-—Ç–æ –±—É–¥–µ—Ç", reply_markup=types.InlineKeyboardMarkup().add(
            types.InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –∑–∞–¥–∞–Ω–∏—è", url="https://example.com")
        ))

    elif message.text == "–ü–µ—Ä–µ–≤–æ–¥":
        await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏ —Å—É–º–º—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:")
        user_states[user_id] = "waiting_for_transfer"

    elif message.text == "–†–µ–π—Ç–∏–Ω–≥":
        rating = get_all_users()
        rating.sort(key=lambda x: x["balance"], reverse=True)

        rating_message = "–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º –º–æ–Ω–µ—Ç–∫–∞–º:\n"
        for i, user in enumerate(rating[:5], start=1):
            rating_message += f"{i}. {user['name']} - {user['balance']} –º–æ–Ω–µ—Ç\n"

        await bot.send_message(message.chat.id, rating_message)

    elif message.text == "–ú–∞–≥–∞–∑–∏–Ω":
        shop_message = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ–º—ã:\n"
        for meme_id, meme_info in MEMES.items():
            shop_message += f"{meme_id}: {meme_info['caption']} - {meme_info['price']} –º–æ–Ω–µ—Ç\n"

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for meme_id in MEMES.keys():
            markup.add(types.KeyboardButton(f"–ö—É–ø–∏—Ç—å {meme_id}"))
        markup.add(types.KeyboardButton("–í—ã–π—Ç–∏ –≤ –º–µ–Ω—é"))
        markup.add(types.KeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—É–ø–ª–µ–Ω–Ω—ã–µ –º–µ–º—ã"))

        await bot.send_message(message.chat.id, shop_message, reply_markup=markup)

    elif message.text == "–í—ã–π—Ç–∏ –≤ –º–µ–Ω—é":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("–ë–∞–ª–∞–Ω—Å"), types.KeyboardButton("–ó–∞–¥–∞–Ω–∏—è"))
        markup.add(types.KeyboardButton("–ü–µ—Ä–µ–≤–æ–¥"), types.KeyboardButton("–†–µ–π—Ç–∏–Ω–≥"))
        markup.add(types.KeyboardButton("–ú–∞–≥–∞–∑–∏–Ω"))

        await bot.send_message(message.chat.id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=markup)

    elif message.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—É–ø–ª–µ–Ω–Ω—ã–µ –º–µ–º—ã":
        purchased_memes = user_data.get("purchased_memes", [])
        if not purchased_memes:
            await bot.send_message(message.chat.id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –º–µ–º–æ–≤.")
            return

        response = "–í–∞—à–∏ –∫—É–ø–ª–µ–Ω–Ω—ã–µ –º–µ–º—ã:\n"
        for meme_id in purchased_memes:
            meme_info = MEMES[meme_id]
            response += f"- {meme_info['caption']}\n"

        await bot.send_message(message.chat.id, response)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == "waiting_for_transfer")
async def process_transfer(message):
    try:
        parts = message.text.split()
        if len(parts) != 2 or not parts[0].isdigit() or not parts[1].isdigit():
            await bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏ —Å—É–º–º—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
            return

        recipient_id = int(parts[0])
        amount = int(parts[1])

        sender_data = get_or_create_user(message.from_user.id)
        recipient_data = get_or_create_user(recipient_id)

        if sender_data["passive_balance"] >= amount > 0:
            sender_data["passive_balance"] -= amount
            recipient_data["active_balance"] += amount

            update_user(sender_data["user_id"], {"passive_balance": sender_data["passive_balance"]})
            update_user(recipient_data["user_id"], {"active_balance": recipient_data["active_balance"]})

            await bot.send_message(message.chat.id, f"–í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ {amount} –º–æ–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient_id}.")
            await bot.send_message(recipient_id, f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ {amount} –º–æ–Ω–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}.")
        else:
            await bot.send_message(message.chat.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –ø–∞—Å—Å–∏–≤–Ω–æ–º —Å—á–µ—Ç–µ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞.")
    except Exception as e:
        await bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    finally:
        user_states.pop(message.from_user.id, None)

# –ü–æ–∫—É–ø–∫–∞ –º–µ–º–æ–≤
@bot.message_handler(func=lambda message: message.text.startswith("–ö—É–ø–∏—Ç—å "))
async def buy_meme(message):
    user_id = message.from_user.id
    user_data = get_or_create_user(user_id)

    meme_id = message.text.split()[1]
    if meme_id in MEMES:
        meme_price = MEMES[meme_id]["price"]
        if user_data["active_balance"] >= meme_price:
            user_data["active_balance"] -= meme_price
            purchased_memes = user_data["purchased_memes"]
            purchased_memes.append(meme_id)

            update_user(user_id, {
                "active_balance": user_data["active_balance"],
                "purchased_memes": purchased_memes
            })

            await bot.send_photo(
                message.chat.id,
                photo=MEMES[meme_id]["image_url"],
                caption=f"–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ –º–µ–º {meme_id} –∑–∞ {meme_price} –º–æ–Ω–µ—Ç!\n{MEMES[meme_id]['caption']}",
            )
            await bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üòä")

            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(types.KeyboardButton("–í—ã–π—Ç–∏ –≤ –º–µ–Ω—é"))
            await bot.send_message(message.chat.id, "–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=markup)
        else:
            await bot.send_message(message.chat.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ–º —Å—á–µ—Ç–µ.")
    else:
        await bot.send_message(message.chat.id, "–¢–∞–∫–æ–≥–æ –º–µ–º–∞ –Ω–µ—Ç –≤ –º–∞–≥–∞–∑–∏–Ω–µ.")

# –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å
async def daily_bonus():
    while True:
        all_users = get_all_users()
        for user in all_users:
            user_id = user["user_id"]
            user_data = get_or_create_user(user_id)

            if user_data["last_daily_bonus"] != str(asyncio.get_event_loop().time()):
                user_data["passive_balance"] += 100
                user_data["last_daily_bonus"] = str(asyncio.get_event_loop().time())

                update_user(user_id, {
                    "passive_balance": user_data["passive_balance"],
                    "last_daily_bonus": user_data["last_daily_bonus"]
                })

                await bot.send_message(user_id, "–í—ã –ø–æ–ª—É—á–∏–ª–∏ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ +100 –º–æ–Ω–µ—Ç –Ω–∞ –ø–∞—Å—Å–∏–≤–Ω—ã–π —Å—á–µ—Ç!")
        await asyncio.sleep(20)  # –ö–∞–∂–¥—ã–µ 20 —Å–µ–∫—É–Ω–¥

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await asyncio.gather(bot.infinity_polling(), daily_bonus())

if __name__ == "__main__":
    from database import create_users_table
    create_users_table()  # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    asyncio.run(main())