import telebot
from telebot import types
import sqlite3
from database import create_connection, add_user, get_user, update_balance, get_top_users

bot = telebot.TeleBot("7104621861:AAH4Aj9TSFVDzYlB14Wnw4dgxx9jUXJJbjc")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
from database import init_db

init_db()



@bot.message_handler(commands=['start'])
def start(message):
    conn = create_connection()
    if conn:
        add_user(conn, message.from_user.id, message.from_user.username)
        conn.close()

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    button_accept = types.KeyboardButton("‚úÖ –°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è")
    markup.add(button_accept)

    bot.send_message(
        message.chat.id,
        "üîê –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö.",
        reply_markup=markup
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è"
@bot.message_handler(func=lambda message: message.text == "‚úÖ –°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è")
def show_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å")
    btn2 = types.KeyboardButton("üìã –ó–∞–¥–∞–Ω–∏—è")
    btn3 = types.KeyboardButton("üîÑ –ü–µ—Ä–µ–≤–æ–¥")
    btn4 = types.KeyboardButton("üèÜ –†–µ–π—Ç–∏–Ω–≥")
    btn5 = types.KeyboardButton("üõí –ú–∞–≥–∞–∑–∏–Ω")
    markup.add(btn1, btn2, btn3, btn4, btn5)

    bot.send_message(message.chat.id, "üëá –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ë–∞–ª–∞–Ω—Å"
@bot.message_handler(func=lambda message: message.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
def balance(message):
    conn = create_connection()
    if conn:
        user = get_user(conn, message.from_user.id)
        conn.close()

        if user:
            bot.send_message(
                message.chat.id,
                f"–í–∞—à–∏ –±–∞–ª–∞–Ω—Å—ã:\n\n"
                f"–ê–∫—Ç–∏–≤–Ω—ã–π: {user[2]} –±–∞–ª–ª–æ–≤\n"
                f"–ü–∞—Å—Å–∏–≤–Ω—ã–π: {user[3]} –±–∞–ª–ª–æ–≤"
            )
        else:
            bot.send_message(message.chat.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–¥–∞–Ω–∏—è"
@bot.message_handler(func=lambda message: message.text == "üìã –ó–∞–¥–∞–Ω–∏—è")
def tasks(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞–Ω–∏—è–º", url="https://example.com/tasks"))
    bot.send_message(message.chat.id, "–ó–∞–¥–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –Ω–∞—à–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:", reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–≤–æ–¥"
@bot.message_handler(func=lambda message: message.text == "üîÑ –ü–µ—Ä–µ–≤–æ–¥")
def transfer(message):
    msg = bot.send_message(message.chat.id,
                           "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏ —Å—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∞ (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):\n–ü—Ä–∏–º–µ—Ä: 123456789 100")
    bot.register_next_step_handler(msg, process_transfer_amount)


def process_transfer_amount(message):
    try:
        user_id = message.from_user.id
        recipient_id, amount = message.text.split()
        recipient_id = int(recipient_id)
        amount = int(amount)

        if amount <= 0:
            bot.send_message(message.chat.id, "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")
            return

        conn = create_connection()
        if not conn:
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        sender = get_user(conn, user_id)
        recipient = get_user(conn, recipient_id)

        if not sender or not recipient:
            bot.send_message(message.chat.id, "‚ùå –û–¥–∏–Ω –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            conn.close()
            return

        if sender[3] < amount:  # passive_balance
            bot.send_message(message.chat.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –ø–∞—Å—Å–∏–≤–Ω–æ–º –±–∞–ª–∞–Ω—Å–µ!")
            conn.close()
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
        bot.send_message(
            message.chat.id,
            f"–ì–æ—Ç–æ–≤–æ –∫ –ø–µ—Ä–µ–≤–æ–¥—É:\n"
            f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å: @{recipient[1]}\n"
            f"–°—É–º–º–∞: {amount} –±–∞–ª–ª–æ–≤\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–µ—Ä–µ–≤–æ–¥–∞:",
            reply_markup=create_transfer_buttons()
        )


        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ)
        bot.transfer_data = {
            "sender_id": user_id,
            "recipient_id": recipient_id,
            "amount": amount
        }

        conn.close()

    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: ID_–ø–æ–ª—É—á–∞—Ç–µ–ª—è –°–£–ú–ú–ê")


def create_transfer_buttons():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üìù –° —Ç–µ–∫—Å—Ç–æ–º")
    btn2 = types.KeyboardButton("üì® –ë–µ–∑ —Ç–µ–∫—Å—Ç–∞")
    markup.add(btn1, btn2)
    return markup


@bot.message_handler(func=lambda message: message.text in ["üìù –° —Ç–µ–∫—Å—Ç–æ–º", "üì® –ë–µ–∑ —Ç–µ–∫—Å—Ç–∞"])
def process_transfer_type(message):
    if not hasattr(bot, 'transfer_data'):
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥–∞ —É—Ç–µ—Ä—è–Ω—ã")
        return

    if message.text == "üìù –° —Ç–µ–∫—Å—Ç–æ–º":
        msg = bot.send_message(message.chat.id, "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è:")
        bot.register_next_step_handler(msg, complete_transfer_with_text)
    else:
        complete_transfer_without_text(message)


def complete_transfer_with_text(message):
    if not hasattr(bot, 'transfer_data'):
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥–∞ —É—Ç–µ—Ä—è–Ω—ã")
        return

    conn = create_connection()
    if not conn:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!")
        return

    data = bot.transfer_data
    sender_id = data["sender_id"]
    recipient_id = data["recipient_id"]
    amount = data["amount"]

    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã
    sender = get_user(conn, sender_id)
    recipient = get_user(conn, recipient_id)

    new_sender_passive = sender[3] - amount
    new_recipient_active = recipient[2] + amount

    update_balance(conn, sender_id, passive_balance=new_sender_passive)
    update_balance(conn, recipient_id, active_balance=new_recipient_active)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
    try:
        bot.send_message(
            recipient_id,
            f"üí∏ –í–∞–º –ø–µ—Ä–µ–≤–µ–ª–∏ {amount} –±–∞–ª–ª–æ–≤!\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:\n\n{message.text}"
        )
    except:
        pass  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–µ–Ω—é
    show_menu(message)
    bot.send_message(
        message.chat.id,
        f"‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!\n"
        f"–ù–æ–≤—ã–π –ø–∞—Å—Å–∏–≤–Ω—ã–π –±–∞–ª–∞–Ω—Å: {new_sender_passive}"
    )

    del bot.transfer_data  # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    conn.close()


def complete_transfer_without_text(message):
    if not hasattr(bot, 'transfer_data'):
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥–∞ —É—Ç–µ—Ä—è–Ω—ã")
        return

    conn = create_connection()
    if not conn:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!")
        return

    data = bot.transfer_data
    sender_id = data["sender_id"]
    recipient_id = data["recipient_id"]
    amount = data["amount"]

    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã
    sender = get_user(conn, sender_id)
    recipient = get_user(conn, recipient_id)

    new_sender_passive = sender[3] - amount
    new_recipient_active = recipient[2] + amount

    update_balance(conn, sender_id, passive_balance=new_sender_passive)
    update_balance(conn, recipient_id, active_balance=new_recipient_active)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
    try:
        bot.send_message(recipient_id, f"üí∏ –í–∞–º –ø–µ—Ä–µ–≤–µ–ª–∏ {amount} –±–∞–ª–ª–æ–≤!")
    except:
        pass  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–µ–Ω—é
    show_menu(message)
    bot.send_message(
        message.chat.id,
        f"‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!\n"
        f"–ù–æ–≤—ã–π –ø–∞—Å—Å–∏–≤–Ω—ã–π –±–∞–ª–∞–Ω—Å: {new_sender_passive}"
    )

    del bot.transfer_data  # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    conn.close()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–†–µ–π—Ç–∏–Ω–≥"
@bot.message_handler(func=lambda message: message.text == "üèÜ –†–µ–π—Ç–∏–Ω–≥")
def rating(message):
    conn = create_connection()
    if not conn:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!")
        return

    top_users = get_top_users(conn)
    conn.close()


    if not top_users:
        bot.send_message(message.chat.id, "üèÜ –†–µ–π—Ç–∏–Ω–≥ –ø–æ–∫–∞ –ø—É—Å—Ç!")
        return

    rating_text = "üèÜ –¢–æ–ø-5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    for i, (username, balance) in enumerate(top_users, 1):
        rating_text += f"{i}. @{username} ‚Äî {balance} –±–∞–ª–ª–æ–≤\n"

    bot.send_message(message.chat.id, rating_text)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–∞–≥–∞–∑–∏–Ω"
@bot.message_handler(func=lambda message: message.text == "üõí –ú–∞–≥–∞–∑–∏–Ω")
def shop(message):
    bot.send_message(message.chat.id, "üõç –ú–∞–≥–∞–∑–∏–Ω —Å–∫–æ—Ä–æ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è! –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏.")



if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling()