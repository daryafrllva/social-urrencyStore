import logging

import telebot
from telebot import types

from database import create_connection, add_user, get_user, update_balance, get_top_users, get_user_from_link, do_transfer

bot = telebot.TeleBot("7714684338:AAEynrLWSJNoMWcMgWTvZIOakF_pFc4WZ6s")
logger = telebot.logger
telebot.logger.setLevel(logging.DEBUG)  # –¥–µ–±–∞–≥–≥–µ—Ä –≤ –∫–æ–Ω—Å–æ–ª–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
from database import init_db

init_db()
transfers = dict()

menu_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
btn1 = types.KeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å")
btn2 = types.KeyboardButton("üìã –ó–∞–¥–∞–Ω–∏—è")
btn3 = types.KeyboardButton("üîÑ –ü–µ—Ä–µ–≤–æ–¥")
btn4 = types.KeyboardButton("üèÜ –†–µ–π—Ç–∏–Ω–≥")
btn5 = types.KeyboardButton("üõí –ú–∞–≥–∞–∑–∏–Ω")
menu_keyboard.add(btn1, btn2, btn3, btn4, btn5)


@bot.message_handler(commands=['start'])
def start(message):
    conn = create_connection()
    if conn:
        add_user(conn, message.chat.id, message.from_user.username)
        update_balance(conn, message.chat.id, 100, 100)
        conn.close()

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    button_accept = types.KeyboardButton("‚úÖ –°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è")
    markup.add(button_accept)

    bot.send_message(
        message.chat.id,
        "üîê –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö.",
        reply_markup=markup
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è"
@bot.message_handler(func=lambda message: message.text == "‚úÖ –°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è")
def show_menu(message):
    bot.send_message(message.chat.id, "üëá –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu_keyboard)


@bot.callback_query_handler(lambda call: call.data == 'get_menu')
def get_menu(call):
    bot.send_message(call.message.chat.id, "üëá –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu_keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ë–∞–ª–∞–Ω—Å"
@bot.message_handler(func=lambda message: message.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
def balance(message):
    conn = create_connection()
    if conn:
        user = get_user(conn, message.from_user.id)
        conn.close()

        if user:
            bot.send_message(
                message.chat.id,
                f"–í–∞—à–∏ –±–∞–ª–∞–Ω—Å—ã:\n\n"
                f"–ê–∫—Ç–∏–≤–Ω—ã–π: {user[2]} –±–∞–ª–ª–æ–≤\n"
                f"–ü–∞—Å—Å–∏–≤–Ω—ã–π: {user[3]} –±–∞–ª–ª–æ–≤"
            )
        else:
            bot.send_message(message.chat.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–¥–∞–Ω–∏—è"
@bot.message_handler(func=lambda message: message.text == "üìã –ó–∞–¥–∞–Ω–∏—è")
def tasks(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞–Ω–∏—è–º", url="https://example.com/tasks"))
    bot.send_message(message.chat.id, "–ó–∞–¥–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –Ω–∞—à–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:", reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–≤–æ–¥"
@bot.message_handler(func=lambda message: message.text == "üîÑ –ü–µ—Ä–µ–≤–æ–¥")
def transfer(message):
    msg = bot.send_message(message.chat.id,
                           "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–ø–æ –∂–µ–ª–∞–Ω–∏—é) —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n–ü—Ä–∏–º–µ—Ä: @example 100 –°–ø–∞—Å–∏–±–æ!)")
    bot.register_next_step_handler(msg, process_transfer_amount)


def process_transfer_amount(message):
    try:
        data = message.text.split() + ['']
        recipient_link, amount, comment = data[0], int(data[1]), data[2:]
        user_id = message.chat.id

        if amount <= 0:
            bot.send_message(message.chat.id, "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")
            return

        conn = create_connection()
        if not conn:
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!")
            return

        recipient = get_user_from_link(conn, recipient_link)
        sender = get_user(conn, user_id)

        if not sender:
            bot.send_message(message.chat.id, "‚ùå –í—ã –Ω–µ –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!")
            conn.close()
            return

        if not recipient:
            bot.send_message(message.chat.id, "‚ùå –ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            conn.close()
            return

        if sender[3] < amount:  # passive_balance
            bot.send_message(message.chat.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –ø–∞—Å—Å–∏–≤–Ω–æ–º –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞!")
            conn.close()
            return

        transfers[f'{sender[0]}'] = (sender, recipient, amount, comment)
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        button_send = types.InlineKeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å', callback_data=f'transfer_from_{sender[0]}')
        button_cancel = types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å', callback_data=f'get_menu')
        keyboard.add(button_send, button_cancel)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
        bot.send_message(
            message.chat.id,
            f"–ì–æ—Ç–æ–≤–æ –∫ –ø–µ—Ä–µ–≤–æ–¥—É:\n"
            f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å: @{recipient[1]}\n"
            f"–°—É–º–º–∞: {amount} –±–∞–ª–ª–æ–≤\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–µ—Ä–µ–≤–æ–¥–∞:",
            reply_markup=keyboard
        )

        conn.close()

    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: ID_–ø–æ–ª—É—á–∞—Ç–µ–ª—è –°–£–ú–ú–ê")


@bot.callback_query_handler(lambda call: 'transfer_from_' in call.data)
def transfer_from(call):
    message = call.message

    conn = create_connection()
    sender, recipient, amount, comment = transfers[call.data.split('_')[-1]]
    print(sender, recipient)
    comment = ' '.join(comment)
    do_transfer(conn, sender, recipient, amount)

    transfers[sender[0]] = ()
    bot.send_message(call.message.chat.id, "–ü–µ—Ä–µ–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    get_menu(call)

    bot.send_message(recipient[0],
                     f'–í–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–µ—Ä–µ–≤–æ–¥ –æ—Ç {sender[1]} –Ω–∞ —Å—É–º–º—É {amount}.'
                     f'\n{f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <i>{comment}</i>." if comment else ""}', parse_mode='html')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–†–µ–π—Ç–∏–Ω–≥"
@bot.message_handler(func=lambda message: message.text == "üèÜ –†–µ–π—Ç–∏–Ω–≥")
def rating(message):
    conn = create_connection()
    if not conn:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!")
        return

    top_users = get_top_users(conn)
    conn.close()

    if not top_users:
        bot.send_message(message.chat.id, "üèÜ –†–µ–π—Ç–∏–Ω–≥ –ø–æ–∫–∞ –ø—É—Å—Ç!")
        return

    rating_text = "üèÜ –¢–æ–ø-5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    for i, (username, balance) in enumerate(top_users, 1):
        rating_text += f"{i}. @{username} ‚Äî {balance} –±–∞–ª–ª–æ–≤\n"

    bot.send_message(message.chat.id, rating_text)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–∞–≥–∞–∑–∏–Ω"
@bot.message_handler(func=lambda message: message.text == "üõí –ú–∞–≥–∞–∑–∏–Ω")
def shop(message):
    bot.send_message(message.chat.id, "üõç –ú–∞–≥–∞–∑–∏–Ω —Å–∫–æ—Ä–æ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è! –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏.")


if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling()
