import logging

import telebot
from telebot import types

from threading import Thread
from time import sleep
import schedule

from database import *
from keyboards import admin_keyboard, menu_keyboard

bot = telebot.TeleBot("7783814922:AAHnHN_U8YlVTuxu8jKkMsqzZ4Gxz3Nh_k0")
logger = telebot.logger
telebot.logger.setLevel(logging.DEBUG)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
init_db()
transfers = dict()

constants = {'rating_size': 5,  # –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä —Ä–µ–π—Ç–∏–Ω–≥–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞
             'fake_bonus_time': 1,
             'bonus_amount': 1000}  # –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–µ—Ä–∏–æ–¥–∞ –≤—ã–¥–∞—á–∏ –±–æ–Ω—É—Å–∞

# –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
PRODUCTS = [
    {
        "name": "üñäÔ∏è –ü—Ä–µ–º–∏—É–º —Ä—É—á–∫–∞",
        "description": "–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–∞—è —Ä—É—á–∫–∞ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º –ø—Ä–æ–µ–∫—Ç–∞",
        "price": 1500,
        "image": "https://storage.yandexcloud.net/mostro-gm-media/ea9ede2f-968c-9ddd-5cb0-afa64553bf12/4.jpg"
    },
    {
        "name": "üìî –ë–ª–æ–∫–Ω–æ—Ç PRO",
        "description": "–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –±–ª–æ–∫–Ω–æ—Ç –≤ —Ç–≤–µ—Ä–¥–æ–π –æ–±–ª–æ–∂–∫–µ",
        "price": 2500,
        "image": "https://fastcolor.ru/wp-content/uploads/2024/01/gazprom-energoholding-bloknoty_3.jpg"
    },
    {
        "name": "üß• –•—É–¥–∏ —Å –ø—Ä–∏–Ω—Ç–æ–º",
        "description": "–£–¥–æ–±–Ω–æ–µ —Ö—É–¥–∏ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –ø—Ä–∏–Ω—Ç–æ–º",
        "price": 5000,
        "image": "https://sun9-63.userapi.com/s/v1/ig2/HIcM9pHSmM-TSeUiPoDnDpxCU9UsHeH5QtWql8IDwMxRleT1mo0WtqgSu5r4khDc7ywTB62fNdw5yabJBdJ_Vuuz.jpg?quality=95&as=32x43,48x64,72x96,108x144,160x213,240x320,360x480,480x639,540x719,640x853,720x959,1080x1439,1201x1600&from=bu&u=xrd3D3CKlxxcapbeJULbXE202AJx__K9BbZtgldCDXY&cs=453x604"
    },
{
        "name": "üìñ –û—Ç–∫—Ä—ã—Ç–∫–∞ –Ω–∞ 23 —Ñ–µ–≤—Ä–∞–ª—è",
        "description": "–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–∞—è –æ—Ç–∫—Ä—ã—Ç–∫–∞ –Ω–∞ 23 —Ñ–µ–≤—Ä–∞–ª—è ",
        "price": 50,
        "image": "https://s8.stc.all.kpcdn.net/family/wp-content/uploads/2024/02/title-photo-in-otkrytki-s-23-fevralja-960x540-1.jpg"
    },
{
        "name": "üèñ –ø—É—Ç—ë–≤–∫–∞ –Ω–∞ –ë–∞–π–∫–∞–ª",
        "description": "–¢–∏–ø–æ –æ—Ç–ø—É—Å–∫",
        "price": 100000,
        "image": "https://baikalfoundation.ru/wp-content/uploads/2021/04/14-1400x933.png"
    }
]


# —Ñ—É–Ω–∫—Ü–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–æ—Ä–º—É —Å–ª–æ–≤–∞
# –∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂, —Ä–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂, –∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂ –≤–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —á–∏—Å–ª–µ
# –ø—Ä–∏–º–µ—Ä –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: —Å–æ–±–∞–∫–∞, —Å–æ–±–∞–∫–∏, —Å–æ–±–∞–∫, 3
# –ø—Ä–∏–º–µ—Ä –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: —Å–æ–±–∞–∫–∏
def word_for_count(nominative_singular: str = '–î–∂–æ—É–ª—å',
                   genitive: str = '–î–∂–æ—É–ª—è',
                   nominative_plural: str = '–î–∂–æ—É–ª–µ–π',
                   count: int = 1):
    if count % 100 in range(5, 21) or count % 10 in range(5, 10) or count % 10 == 0:
        return nominative_plural
    elif count % 10 in range(2, 5):
        return genitive
    else:
        return nominative_singular


@bot.message_handler(commands=['start'])
def start(message):
    conn = create_connection()
    if not get_user(conn, message.chat.id):
        add_user(conn, message.chat.id, message.from_user.username)
        update_balance(conn, message.chat.id, 100, 100)
        conn.close()

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add(types.KeyboardButton("üìÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ"))
        markup.add(types.KeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å"))
        bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
                                          "üîê –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ:",
                         reply_markup=markup)
    else:
        bot.send_message(message.chat.id, '–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω.')
        show_menu(message)


@bot.message_handler(func=lambda message: message.text == "üìÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ")
def show_document(message):
    bot.send_document(message.chat.id, open('user_agreement.docx', 'rb'),
                      caption="üìÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ")


@bot.message_handler(func=lambda message: message.text == "‚úÖ –ü—Ä–∏–Ω—è—Ç—å" or message.text == '–ú–µ–Ω—é')
def show_menu(message):
    conn = create_connection()
    user_role = get_user_role(conn, message.chat.id)
    print(user_role)
    bot.send_message(message.chat.id, "üëá –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                     reply_markup=menu_keyboard if user_role == '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' else admin_keyboard)


@bot.message_handler(func=lambda message: message.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
def balance(message):
    conn = create_connection()
    if conn:
        user = get_user(conn, message.from_user.id)
        conn.close()
        if user:
            bot.send_message(message.chat.id,
                             f"–í–∞—à–∏ –±–∞–ª–∞–Ω—Å—ã:"
                             f"\n\n<b>–ê–∫—Ç–∏–≤–Ω—ã–π:</b> {user[2]} {word_for_count(count=user[2])}\n"
                             f"<b>–ü–∞—Å—Å–∏–≤–Ω—ã–π:</b> {user[3]} {word_for_count(count=user[3])}\n\n"
                             f"<i><b>–ê–∫—Ç–∏–≤–Ω—ã–π —Å—á—ë—Ç</b> –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –≤ –º–∞–≥–∞–∑–∏–Ω–µ –∏–ª–∏"
                             f" –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –∑–∞–¥–∞–Ω–∏—è.\n–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –î–∂–æ—É–ª–∏ –∏ –≤—ã—Ä—ã–≤–∞–π—Ç–µ—Å—å –≤ —Ç–æ–ø –†–µ–π—Ç–∏–Ω–≥–∞!\n\n"
                             f"<b>–ü–∞—Å—Å–∏–≤–Ω—ã–π —Å—á—ë—Ç</b> –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, "
                             f"–ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–Ω –ø–æ–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–æ–π.</i>",
                             parse_mode='html')
        else:
            bot.send_message(message.chat.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")


@bot.message_handler(func=lambda message: message.text == "üìã –ó–∞–¥–∞–Ω–∏—è")
def tasks(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üóÇ –ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞–Ω–∏—è–º", url="https://example.com/tasks"))
    bot.send_message(message.chat.id, "–ó–∞–¥–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –Ω–∞—à–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == "üîÑ –ü–µ—Ä–µ–≤–æ–¥")
def transfer(message):
    under_keyboard = types.InlineKeyboardMarkup(row_width=1)
    cancel_button = types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='cancel')
    under_keyboard.add(cancel_button)
    msg = bot.send_message(message.chat.id,
                           "–í–≤–µ–¥–∏—Ç–µ <b>—Å—Å—ã–ª–∫—É</b> –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, <b>—Å—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∞</b> "
                           "–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n\n–ü—Ä–∏–º–µ—Ä: @username 100 –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å)",
                           parse_mode='html',
                           reply_markup=under_keyboard)
    bot.register_next_step_handler(msg, process_transfer_amount)


def process_transfer_amount(message):
    try:
        data = message.text.split()
        if len(data) < 2:
            raise ValueError

        recipient_link, amount = data[0], int(data[1])
        user_id = message.chat.id

        if amount <= 0:
            bot.send_message(message.chat.id, "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")
            return

        conn = create_connection()
        if not conn:
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!")
            return

        recipient = get_user_from_link(conn, recipient_link)
        sender = get_user(conn, user_id)

        if not sender or not recipient:
            bot.send_message(message.chat.id, "‚ùå –û–¥–∏–Ω –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            conn.close()
            return

        elif sender[3] < amount:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –ø–∞—Å—Å–∏–≤–Ω–æ–º –±–∞–ª–∞–Ω—Å–µ!")
            conn.close()
            return

        elif sender[0] == recipient[0]:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Å–∞–º–æ–º—É —Å–µ–±–µ!")
            conn.close()
            return

        transfers[str(user_id)] = (sender, recipient, amount)

        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_transfer_{user_id}"),
            types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")
        )

        bot.send_message(
            message.chat.id,
            f"–ü–µ—Ä–µ–≤–æ–¥ –¥–ª—è @{recipient[1]} –Ω–∞ {amount} {word_for_count(count=amount)}.\n"
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ:", reply_markup=markup)
        conn.close()

    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: @username —Å—É–º–º–∞")


@bot.callback_query_handler(func=lambda call: call.data.startswith('confirm_transfer_'))
def confirm_transfer(call):
    user_id = call.data.split('_')[-1]
    if user_id not in transfers:
        bot.answer_callback_query(call.id, "‚ùå –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥–∞ —É—Ç–µ—Ä—è–Ω—ã")
        return

    sender, recipient, amount = transfers[user_id]
    conn = create_connection()
    if conn:
        do_transfer(conn, sender, recipient, amount)
        conn.close()
        bot.send_message(sender[0], f"‚úÖ –ü–µ—Ä–µ–≤–æ–¥ @{recipient[1]} –Ω–∞ {amount} {word_for_count(count=amount)} –≤—ã–ø–æ–ª–Ω–µ–Ω!")
        bot.send_message(recipient[0], f"üí∏ –í–∞–º –ø–µ—Ä–µ–≤–µ–ª–∏ {amount} {word_for_count(count=amount)} –æ—Ç @{sender[1]}.")
        bot.delete_message(call.message.chat.id, call.message.message_id)
        del transfers[user_id]


@bot.message_handler(func=lambda message: message.text == "üèÜ –†–µ–π—Ç–∏–Ω–≥")
def rating(message):
    conn = create_connection()
    if not conn:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!")
        return

    top_users = get_top_users(conn, constants['rating_size'])
    user_rating_place = get_user_place_in_top(conn, message.chat.id)
    conn.close()

    if not top_users:
        bot.send_message(message.chat.id, "üèÜ –†–µ–π—Ç–∏–Ω–≥ –ø–æ–∫–∞ –ø—É—Å—Ç!")
        return

    rating_text = "üèÜ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    for i, (username, balance) in enumerate(top_users, 1):
        rating_text += f"{i}. @{username} : <b>{balance}</b> {word_for_count(count=balance)}\n"

    rating_text += f'\n\n...–í—ã –∑–∞–Ω–∏–º–∞–µ—Ç–µ <b>{user_rating_place}</b> –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ.' \
        if user_rating_place > constants['rating_size'] else ''

    bot.send_message(message.chat.id, rating_text, parse_mode='html')


@bot.message_handler(func=lambda message: message.text == "üõí –ú–∞–≥–∞–∑–∏–Ω")
def shop(message):
    markup = types.InlineKeyboardMarkup()
    for idx, product in enumerate(PRODUCTS):
        markup.add(
            types.InlineKeyboardButton(
                f"{product['name']} - {product['price']} {word_for_count(count=product['price'])}",
                callback_data=f"buy_{idx}"))
    bot.send_message(message.chat.id, "üõçÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('buy_'))
def handle_product_selection(call):
    try:
        product_id = int(call.data.split('_')[1])  # –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞ –∏–∑ callback_data
        product = PRODUCTS[product_id]  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä –∏–∑ —Å–ø–∏—Å–∫–∞

        conn = create_connection()
        if not conn:
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!")
            return

        user = get_user(conn, call.from_user.id)
        conn.close()

        if not user:
            bot.answer_callback_query(call.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        markup = types.InlineKeyboardMarkup()
        markup.row(
            types.InlineKeyboardButton(
                "‚úÖ –ö—É–ø–∏—Ç—å",
                callback_data=f"confirm_{product_id}"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º product_id –∑–¥–µ—Å—å
            ),
            types.InlineKeyboardButton(
                "‚ùå –û—Ç–º–µ–Ω–∞",
                callback_data="cancel"
            )
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–≤–∞—Ä–æ–º
        bot.send_photo(
            call.message.chat.id,
            product['image'],
            caption=(
                f"<b>{product['name']}</b>\n\n"
                f"{product['description']}\n\n"
                f"üíµ –¶–µ–Ω–∞: {product['price']} –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∞–ª–ª–æ–≤\n"
                f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user[2]} –±–∞–ª–ª–æ–≤"
            ),
            parse_mode="HTML",
            reply_markup=markup
        )

    except IndexError:
        bot.answer_callback_query(call.id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")


@bot.callback_query_handler(func=lambda call: call.data.startswith('confirm_'))
def confirm_purchase(call):
    product_id = int(call.data.split('_')[1])
    product = PRODUCTS[product_id]
    user_id = call.from_user.id

    conn = create_connection()
    if not conn:
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!")
        return

    user = get_user(conn, user_id)
    if not user:
        bot.answer_callback_query(call.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        conn.close()
        return

    if user[2] < product['price']:
        bot.answer_callback_query(call.id,
                                  f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ù—É–∂–Ω–æ "
                                  f"{product['price']} {word_for_count(count=product['price'])}",
                                  show_alert=True)
        conn.close()
        return

    # –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –∏ –∑–∞–ø–∏—Å—å –ø–æ–∫—É–ø–∫–∏
    new_balance = user[2] - product['price']
    update_balance(conn, user_id, active_balance=new_balance)
    add_purchase(conn, user_id, product['name'], product['price'])

    bot.delete_message(call.message.chat.id, call.message.message_id)
    bot.send_photo(
        call.message.chat.id,
        product['image'],
        caption=(
            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–∫—É–ø–∫–æ–π!\n\n"
            f"<b>{product['name']}</b>\n"
            f"üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {product['price']} –±–∞–ª–ª–æ–≤\n"
            f"üí≥ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} –±–∞–ª–ª–æ–≤\n\n"
            "üõçÔ∏è –û–∂–∏–¥–∞–π—Ç–µ —Ç–æ–≤–∞—Ä!"
        ),
        parse_mode="HTML"
    )
    conn.close()


@bot.callback_query_handler(func=lambda call: call.data == 'cancel')
def cancel_purchase(call):
    bot.delete_message(call.message.chat.id, call.message.message_id)
    bot.answer_callback_query(call.id, "‚ùå –ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")

# !!!
@bot.callback_query_handler(func=lambda call: call.data == 'cancel')
def cancel_action(call):
    bot.clear_step_handler_by_chat_id(call.message.chat.id)
    bot.delete_message(call.message.chat.id, call.message.message_id)
    bot.answer_callback_query(call.id, "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")


@bot.message_handler(commands=['history'])
def purchase_history(message):
    conn = create_connection()
    if not conn:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!")
        return

    history = get_purchase_history(conn, message.from_user.id)
    conn.close()

    if not history:
        bot.send_message(message.chat.id, "üì¶ –£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫")
        return

    history_text = "üìú –ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –ø–æ–∫—É–ø–æ–∫:\n\n"
    for item in history:
        history_text += f"üõí {item[0]} - {item[1]} –±–∞–ª–ª–æ–≤\n"
        history_text += f"üìÖ {item[2]}\n\n"

    bot.send_message(message.chat.id, history_text)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ò—Å—Ç–æ—Ä–∏—è"
@bot.message_handler(func=lambda message: message.text == "üìú –ò—Å—Ç–æ—Ä–∏—è")
def purchase_history(message):
    conn = create_connection()
    if not conn:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∫—É–ø–æ–∫ –∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    purchases = get_purchase_history(conn, message.from_user.id)
    transfers = get_transfer_history(conn, message.from_user.id)
    conn.close()

    if not purchases and not transfers:
        bot.send_message(message.chat.id, "üì¶ –£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π")
        return

    history_text = "üìú –ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π:\n\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∫—É–ø–∫–∏
    if purchases:
        history_text += "üõçÔ∏è <b>–ü–æ–∫—É–ø–∫–∏:</b>\n"
        for item in purchases:
            history_text += f"üõí {item[0]} - {item[1]} –±–∞–ª–ª–æ–≤\n"
            history_text += f"üìÖ {item[2]}\n\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã
    if transfers:
        history_text += "üí∏ <b>–ü–µ—Ä–µ–≤–æ–¥—ã:</b>\n"
        for item in transfers:
            direction = "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω" if item[3] == "out" else "–ü–æ–ª—É—á–µ–Ω"
            history_text += f"üîÑ {direction} –ø–µ—Ä–µ–≤–æ–¥ {item[1]} –±–∞–ª–ª–æ–≤\n"
            history_text += f"üë§ {'@' + item[2] if item[2] else '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}\n"
            history_text += f"üìÖ {item[0]}\n\n"

    bot.send_message(message.chat.id, history_text, parse_mode="HTML")


@bot.message_handler(func=lambda message: message.text == "üò° –í—ã–¥–∞—Ç—å —à—Ç—Ä–∞—Ñ")
def take_fine(message):
    conn = create_connection()
    user_role = get_user_role(conn, message.chat.id)

    if user_role == '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä':
        fine_keyboard = types.InlineKeyboardMarkup(row_width=1)
        cancel_button = types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='cancel')
        fine_keyboard.add(cancel_button)

        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, '
                                                '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑—ã–º–∞–µ–º–æ–π –≤–∞–ª—é—Ç—ã –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.'
                                                '\n\n–ü—Ä–∏–º–µ—Ä: @test 1000 –ü–ª–æ—Ö–æ —Å–µ–±—è –≤—ë–ª!', reply_markup=fine_keyboard)
        bot.register_next_step_handler(msg, take_fine_by_user_link)
    else:
        bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É.',
                         reply_markup=menu_keyboard)


def take_fine_by_user_link(message):
    try:
        conn = create_connection()
        data = message.text.split() + ['']
        user_link, amount, comment = data[0].strip('@'), int(data[1]), data[2:]
        user = get_user_from_link(conn, user_link)
        comment = " ".join(comment)

        if not user:
            bot.send_message(message.chat.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!",
                             reply_markup=admin_keyboard)
            conn.close()
            return

        update_balance(conn, user[0], active_balance=user[2] - amount)
        bot.send_message(message.chat.id,
                         f'–°–ø–∏—Å–∞–Ω–∏–µ {amount} {word_for_count(count=amount)} —Å–æ —Å—á—ë—Ç–∞ {user[1]} —É—Å–ø–µ—à–Ω–æ!',
                         reply_markup=admin_keyboard)
        bot.send_message(user[0],
                         f'<b>–í—ã –æ—à—Ç—Ä–∞—Ñ–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –Ω–∞ {amount} {word_for_count(count=amount)}.</b> '
                         f'{"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: " + "<i>" + comment + "</i>" if comment.strip() else ""}',
                         parse_mode='html')

    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞!"
                                          " –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: [@username] [—Å—É–º–º–∞] [–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π]")


@bot.message_handler(func=lambda message: message.text == "‚è±Ô∏è –°–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –±–æ–Ω—É—Å–∞")
def change_bonus_time(message):
    change_keyboard = types.InlineKeyboardMarkup(row_width=1)
    cancel_button = types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='cancel')
    change_keyboard.add(cancel_button)

    word_minute = word_for_count("–º–∏–Ω—É—Ç–∞", "–º–∏–Ω—É—Ç—ã", "–º–∏–Ω—É—Ç", constants["fake_bonus_time"])

    bot.send_message(message.chat.id, f'–¢–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è: {constants["fake_bonus_time"]} {word_minute}.'
                                      f'\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è <b>–≤ –º–∏–Ω—É—Ç–∞—Ö</b> (—á–∏—Å–ª–æ):',
                     reply_markup=change_keyboard,
                     parse_mode='html')
    bot.register_next_step_handler(message, do_change_time)


def do_change_time(message):
    try:
        constants['fake_bonus_time'] = int(message.text)
        word_minute = word_for_count("–º–∏–Ω—É—Ç–∞", "–º–∏–Ω—É—Ç—ã", "–º–∏–Ω—É—Ç", constants["fake_bonus_time"])
        bot.send_message(message.chat.id, f'–£—Å–ø–µ—à–Ω–æ! –¢–µ–ø–µ—Ä—å –ø–µ—Ä–∏–æ–¥ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–∞: '
                                          f'<b>{constants["fake_bonus_time"]} '
                                          f'{word_minute}.</b>',
                         parse_mode='html')

        job = schedule.get_jobs()[0]  # –æ—Ç–º–µ–Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∑–∞–¥–∞—á–∏
        schedule.cancel_job(job)
        Thread(target=scheduler).start()  # —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ —Å –¥—Ä—É–≥–∏–º –ø–µ—Ä–∏–æ–¥–æ–º

    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞! "
                                          "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤.")


def scheduler():
    schedule.every(constants['fake_bonus_time']).minutes.do(periodic_bonus)
    while True:
        sleep(1)
        schedule.run_pending()
        if not schedule.get_jobs():
            break


def periodic_bonus():
    conn = create_connection()
    user_ids = get_users(conn)
    for user in user_ids:
        update_balance(conn, user[0], passive_balance=user[3] + constants['bonus_amount'])
        bot.send_message(user[0], f'–í–∞–º –∑–∞—á–∏—Å–ª–µ–Ω –±–æ–Ω—É—Å –Ω–∞ –ø–∞—Å—Å–∏–≤–Ω—ã–π —Å—á—ë—Ç –≤ —Ä–∞–∑–º–µ—Ä–µ {constants["bonus_amount"]} '
                                  f'{word_for_count(count=constants["bonus_amount"])}.')


if __name__ == "__main__":
    Thread(target=scheduler).start()
    bot.infinity_polling()
