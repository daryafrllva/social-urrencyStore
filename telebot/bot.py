import logging
import telebot
from telebot import types
from database import *
import schedule
import time
import threading
from datetime import datetime, timedelta

bot = telebot.TeleBot("7783814922:AAHnHN_U8YlVTuxu8jKkMsqzZ4Gxz3Nh_k0")
logger = telebot.logger
telebot.logger.setLevel(logging.DEBUG)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
init_db()
transfers = dict()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞
def add_passive_income():
    conn = create_connection()
    if conn:
        try:
            cursor = conn.cursor()
            # –ù–∞—á–∏—Å–ª—è–µ–º 1000 –±–∞–ª–ª–æ–≤ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            cursor.execute("UPDATE users SET passive_balance = passive_balance + 1000")
            conn.commit()
            print("–£—Å–ø–µ—à–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞: {e}")
        finally:
            conn.close()


# –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def run_scheduler():
    schedule.every(3).minutes.do(add_passive_income)
    while True:
        schedule.run_pending()
        time.sleep(1)

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
scheduler_thread = threading.Thread(target=run_scheduler)
scheduler_thread.daemon = True
scheduler_thread.start()

@bot.message_handler(commands=['start'])
def start(message):
    conn = create_connection()
    if conn:
        add_user(conn, message.chat.id, message.from_user.username)
        update_balance(conn, message.chat.id, 100, 100)
        conn.close()

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(types.KeyboardButton("‚úÖ –°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è"))
    bot.send_message(
        message.chat.id,
        "üîê –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö.\n\n"
        "üí° –ö–∞–∂–¥—ã–µ 3 –º–∏–Ω—É—Ç—ã –≤–∞–º –±—É–¥–µ—Ç –Ω–∞—á–∏—Å–ª—è—Ç—å—Å—è 1000 –ø–∞—Å—Å–∏–≤–Ω—ã—Ö –±–∞–ª–ª–æ–≤!",
        reply_markup=markup
    )

# –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
PRODUCTS = [
    {
        "name": "üñäÔ∏è –ü—Ä–µ–º–∏—É–º —Ä—É—á–∫–∞",
        "description": "–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–∞—è —Ä—É—á–∫–∞ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º –ø—Ä–æ–µ–∫—Ç–∞",
        "price": 1500,
        "image": "https://storage.yandexcloud.net/mostro-gm-media/ea9ede2f-968c-9ddd-5cb0-afa64553bf12/4.jpg"
    },
    {
        "name": "üìî –ë–ª–æ–∫–Ω–æ—Ç PRO",
        "description": "–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –±–ª–æ–∫–Ω–æ—Ç –≤ —Ç–≤–µ—Ä–¥–æ–π –æ–±–ª–æ–∂–∫–µ",
        "price": 2500,
        "image": "https://fastcolor.ru/wp-content/uploads/2024/01/gazprom-energoholding-bloknoty_3.jpg"
    },
    {
        "name": "üß• –•—É–¥–∏ —Å –ø—Ä–∏–Ω—Ç–æ–º",
        "description": "–£–¥–æ–±–Ω–æ–µ —Ö—É–¥–∏ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –ø—Ä–∏–Ω—Ç–æ–º",
        "price": 5000,
        "image": "https://sun9-63.userapi.com/s/v1/ig2/HIcM9pHSmM-TSeUiPoDnDpxCU9UsHeH5QtWql8IDwMxRleT1mo0WtqgSu5r4khDc7ywTB62fNdw5yabJBdJ_Vuuz.jpg?quality=95&as=32x43,48x64,72x96,108x144,160x213,240x320,360x480,480x639,540x719,640x853,720x959,1080x1439,1201x1600&from=bu&u=xrd3D3CKlxxcapbeJULbXE202AJx__K9BbZtgldCDXY&cs=453x604"
    },
{
        "name": "üìñ –û—Ç–∫—Ä—ã—Ç–∫–∞ –Ω–∞ 23 —Ñ–µ–≤—Ä–∞–ª—è",
        "description": "–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–∞—è –æ—Ç–∫—Ä—ã—Ç–∫–∞ –Ω–∞ 23 —Ñ–µ–≤—Ä–∞–ª—è ",
        "price": 50,
        "image": "https://s8.stc.all.kpcdn.net/family/wp-content/uploads/2024/02/title-photo-in-otkrytki-s-23-fevralja-960x540-1.jpg"
    },
{
        "name": "üèñ –ø—É—Ç—ë–≤–∫–∞ –Ω–∞ –ë–∞–π–∫–∞–ª",
        "description": "–¢–∏–ø–æ –æ—Ç–ø—É—Å–∫",
        "price": 100000,
        "image": "https://baikalfoundation.ru/wp-content/uploads/2021/04/14-1400x933.png"
    }
]

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é
menu_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
menu_keyboard.add(
    types.KeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å"),
    types.KeyboardButton("üìã –ó–∞–¥–∞–Ω–∏—è"),
    types.KeyboardButton("üîÑ –ü–µ—Ä–µ–≤–æ–¥"),
    types.KeyboardButton("üèÜ –†–µ–π—Ç–∏–Ω–≥"),
    types.KeyboardButton("üõí –ú–∞–≥–∞–∑–∏–Ω"),
    types.KeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è")
)


@bot.message_handler(commands=['start'])
def start(message):
    conn = create_connection()
    if conn:
        add_user(conn, message.chat.id, message.from_user.username)
        update_balance(conn, message.chat.id, 100, 100)
        conn.close()

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(types.KeyboardButton("‚úÖ –°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è"))
    bot.send_message(message.chat.id, "üîê –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö.",
                     reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == "‚úÖ –°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è")
def show_menu(message):
    bot.send_message(message.chat.id, "üëá –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu_keyboard)


@bot.message_handler(func=lambda message: message.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
def balance(message):
    conn = create_connection()
    if conn:
        user = get_user(conn, message.from_user.id)
        conn.close()
        if user:
            bot.send_message(
                message.chat.id,
                f"–í–∞—à–∏ –±–∞–ª–∞–Ω—Å—ã:\n\n"
                f"–ê–∫—Ç–∏–≤–Ω—ã–π: {user[2]} –±–∞–ª–ª–æ–≤\n"
                f"–ü–∞—Å—Å–∏–≤–Ω—ã–π: {user[3]} –±–∞–ª–ª–æ–≤\n\n"
                f"üí° –°–ª–µ–¥—É—é—â–µ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 –º–∏–Ω—É—Ç—ã"
            )
        else:
            bot.send_message(message.chat.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")


@bot.message_handler(func=lambda message: message.text == "üìã –ó–∞–¥–∞–Ω–∏—è")
def tasks(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞–Ω–∏—è–º", url="https://example.com/tasks"))
    bot.send_message(message.chat.id, "–ó–∞–¥–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –Ω–∞—à–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == "üîÑ –ü–µ—Ä–µ–≤–æ–¥")
def transfer(message):
    msg = bot.send_message(message.chat.id,
                           "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n–ü—Ä–∏–º–µ—Ä: @username 100")
    bot.register_next_step_handler(msg, process_transfer_amount)


def process_transfer_amount(message):
    try:
        data = message.text.split()
        if len(data) < 2:
            raise ValueError

        recipient_link, amount = data[0], int(data[1])
        user_id = message.chat.id

        if amount <= 0:
            bot.send_message(message.chat.id, "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")
            return

        conn = create_connection()
        if not conn:
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥ —Å–∞–º–æ–º—É —Å–µ–±–µ
        if recipient_link.strip('@') == message.from_user.username:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –¥–µ–Ω—å–≥–∏ —Å–∞–º–æ–º—É —Å–µ–±–µ!")
            conn.close()
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        today = datetime.now().date()
        cursor = conn.cursor()
        cursor.execute('''
            SELECT COUNT(*) FROM transfers 
            WHERE sender_id = ? AND date(transfer_date) = ?
        ''', (user_id, today))
        transfers_today = cursor.fetchone()[0]

        if transfers_today >= 3:
            bot.send_message(message.chat.id, "‚ùå –í—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ 3 –ø–µ—Ä–µ–≤–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è! –õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω.")
            conn.close()
            return

        recipient = get_user_from_link(conn, recipient_link)
        sender = get_user(conn, user_id)

        if not sender or not recipient:
            bot.send_message(message.chat.id, "‚ùå –û–¥–∏–Ω –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            conn.close()
            return

        if sender[3] < amount:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –ø–∞—Å—Å–∏–≤–Ω–æ–º –±–∞–ª–∞–Ω—Å–µ!")
            conn.close()
            return

        transfers[str(user_id)] = (sender, recipient, amount)

        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_transfer_{user_id}"),
            types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")
        )

        bot.send_message(
            message.chat.id,
            f"–ü–µ—Ä–µ–≤–æ–¥ –¥–ª—è @{recipient[1]} –Ω–∞ {amount} –î–∂–æ—É–ª–µ–π\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ:",
            reply_markup=markup
        )
        conn.close()

    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: @username —Å—É–º–º–∞")


# –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é confirm_transfer
@bot.callback_query_handler(func=lambda call: call.data.startswith('confirm_transfer_'))
def confirm_transfer(call):
    user_id = call.data.split('_')[-1]
    if user_id not in transfers:
        bot.answer_callback_query(call.id, "‚ùå –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥–∞ —É—Ç–µ—Ä—è–Ω—ã")
        return

    sender, recipient, amount = transfers[user_id]
    conn = create_connection()
    if conn:
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ –≤ –±–∞–∑—É
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO transfers (sender_id, recipient_id, amount, transfer_date)
            VALUES (?, ?, ?, datetime('now'))
        ''', (sender[0], recipient[0], amount))

        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
        do_transfer(conn, sender, recipient, amount)
        conn.close()

        bot.send_message(sender[0], f"‚úÖ –ü–µ—Ä–µ–≤–æ–¥ @{recipient[1]} –Ω–∞ {amount} –î–∂–æ—É–ª–µ–π –≤—ã–ø–æ–ª–Ω–µ–Ω!")
        bot.send_message(recipient[0], f"üí∏ –í–∞–º –ø–µ—Ä–µ–≤–µ–ª–∏ {amount} –î–∂–æ—É–ª–µ–π –æ—Ç @{sender[1]}")
        bot.delete_message(call.message.chat.id, call.message.message_id)
        del transfers[user_id]

@bot.message_handler(func=lambda message: message.text == "üèÜ –†–µ–π—Ç–∏–Ω–≥")
def rating(message):
    conn = create_connection()
    if not conn:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!")
        return

    top_users = get_top_users(conn)
    conn.close()

    if not top_users:
        bot.send_message(message.chat.id, "üèÜ –†–µ–π—Ç–∏–Ω–≥ –ø–æ–∫–∞ –ø—É—Å—Ç!")
        return

    rating_text = "üèÜ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    for i, (username, balance) in enumerate(top_users, 1):
        rating_text += f"{i}. @{username} - {balance} –î–∂–æ—É–ª–µ–π\n"

    bot.send_message(message.chat.id, rating_text)

@bot.message_handler(func=lambda message: message.text == "üõí –ú–∞–≥–∞–∑–∏–Ω")
def shop(message):
    markup = types.InlineKeyboardMarkup()
    for i, product in enumerate(PRODUCTS):
        markup.add(
            types.InlineKeyboardButton(
                f"{product['name']} - {product['price']} –±–∞–ª–ª–æ–≤",
                callback_data=f"buy_{i}"
            )
        )
    bot.send_message(message.chat.id, "üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω –º–µ—Ä—á–∞. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('buy_'))
def handle_product_selection(call):
    try:
        product_id = int(call.data.split('_')[1])  # –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞ –∏–∑ callback_data
        product = PRODUCTS[product_id]  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä –∏–∑ —Å–ø–∏—Å–∫–∞

        conn = create_connection()
        if not conn:
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!")
            return

        user = get_user(conn, call.from_user.id)
        conn.close()

        if not user:
            bot.answer_callback_query(call.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        markup = types.InlineKeyboardMarkup()
        markup.row(
            types.InlineKeyboardButton(
                "‚úÖ –ö—É–ø–∏—Ç—å",
                callback_data=f"confirm_{product_id}"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º product_id –∑–¥–µ—Å—å
            ),
            types.InlineKeyboardButton(
                "‚ùå –û—Ç–º–µ–Ω–∞",
                callback_data="cancel"
            )
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–≤–∞—Ä–æ–º
        bot.send_photo(
            call.message.chat.id,
            product['image'],
            caption=(
                f"<b>{product['name']}</b>\n\n"
                f"{product['description']}\n\n"
                f"üíµ –¶–µ–Ω–∞: {product['price']} –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∞–ª–ª–æ–≤\n"
                f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user[2]} –±–∞–ª–ª–æ–≤"
            ),
            parse_mode="HTML",
            reply_markup=markup
        )

    except IndexError:
        bot.answer_callback_query(call.id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")


@bot.callback_query_handler(func=lambda call: call.data.startswith('confirm_'))
def confirm_purchase(call):
    product_id = int(call.data.split('_')[1])
    product = PRODUCTS[product_id]
    user_id = call.from_user.id

    conn = create_connection()
    if not conn:
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!")
        return

    user = get_user(conn, user_id)

    if not user:
        bot.answer_callback_query(call.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        conn.close()
        return

    if user[2] < product['price']:
        bot.answer_callback_query(
            call.id,
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∞–ª–ª–æ–≤! –ù—É–∂–Ω–æ {product['price']}",
            show_alert=True
        )
        conn.close()
        return

    # –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –∏ –∑–∞–ø–∏—Å—å –ø–æ–∫—É–ø–∫–∏
    new_balance = user[2] - product['price']
    update_balance(conn, user_id, active_balance=new_balance)
    add_purchase(conn, user_id, product['name'], product['price'])

    bot.delete_message(call.message.chat.id, call.message.message_id)
    bot.send_photo(
        call.message.chat.id,
        product['image'],
        caption=(
            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–∫—É–ø–∫–æ–π!\n\n"
            f"<b>{product['name']}</b>\n"
            f"üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {product['price']} –±–∞–ª–ª–æ–≤\n"
            f"üí≥ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} –±–∞–ª–ª–æ–≤\n\n"
            "üõçÔ∏è –û–∂–∏–¥–∞–π—Ç–µ —Ç–æ–≤–∞—Ä!"
        ),
        parse_mode="HTML"
    )
    conn.close()


@bot.callback_query_handler(func=lambda call: call.data == 'cancel')
def cancel_purchase(call):
    bot.delete_message(call.message.chat.id, call.message.message_id)
    bot.answer_callback_query(call.id, "‚ùå –ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")


@bot.message_handler(commands=['history'])
def purchase_history(message):
    conn = create_connection()
    if not conn:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!")
        return

    history = get_purchase_history(conn, message.from_user.id)
    conn.close()

    if not history:
        bot.send_message(message.chat.id, "üì¶ –£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫")
        return

    history_text = "üìú –ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –ø–æ–∫—É–ø–æ–∫:\n\n"
    for item in history:
        history_text += f"üõí {item[0]} - {item[1]} –±–∞–ª–ª–æ–≤\n"
        history_text += f"üìÖ {item[2]}\n\n"

    bot.send_message(message.chat.id, history_text)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ò—Å—Ç–æ—Ä–∏—è"
@bot.message_handler(func=lambda message: message.text == "üìú –ò—Å—Ç–æ—Ä–∏—è")
def purchase_history(message):
    conn = create_connection()
    if not conn:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∫—É–ø–æ–∫ –∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    purchases = get_purchase_history(conn, message.from_user.id)
    transfers = get_transfer_history(conn, message.from_user.id)
    conn.close()

    if not purchases and not transfers:
        bot.send_message(message.chat.id, "üì¶ –£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π")
        return

    history_text = "üìú –ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π:\n\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∫—É–ø–∫–∏
    if purchases:
        history_text += "üõçÔ∏è <b>–ü–æ–∫—É–ø–∫–∏:</b>\n"
        for item in purchases:
            history_text += f"üõí {item[0]} - {item[1]} –±–∞–ª–ª–æ–≤\n"
            history_text += f"üìÖ {item[2]}\n\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã
    if transfers:
        history_text += "üí∏ <b>–ü–µ—Ä–µ–≤–æ–¥—ã:</b>\n"
        for item in transfers:
            direction = "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω" if item[3] == "out" else "–ü–æ–ª—É—á–µ–Ω"
            history_text += f"üîÑ {direction} –ø–µ—Ä–µ–≤–æ–¥ {item[1]} –±–∞–ª–ª–æ–≤\n"
            history_text += f"üë§ {'@' + item[2] if item[2] else '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}\n"
            history_text += f"üìÖ {item[0]}\n\n"

    bot.send_message(message.chat.id, history_text, parse_mode="HTML")

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling()

